import tkinter as tk
from tkinter import messagebox
from cryptography.fernet import Fernet
import random
import string

class PasswordManager:
    def __init__(self, master):
        self.master = master
        self.master.title("Password Manager")
        self.master.configure(bg='#B5E5CF')
        
        font_style = ("Helvetica", 12, "bold")
        search_bar_font = ("Helvetica", 14)

        # Initialize variables
        self.email_var = tk.StringVar()
        self.password_var = tk.StringVar()
        self.website_var= tk.StringVar()
        self.saved_passwords = []

        # GUI elements
        tk.Label(master, text="PASSWORD MANAGER ", bg='#3498db',font=font_style).grid(row=12, column=3, sticky=tk.E)
        tk.Label(master, text="Website:- ", bg='#3498db',font=font_style ).grid(row=15, column=2, sticky=tk.E)
        tk.Entry(master, textvariable=self.website_var, font=search_bar_font, width=20 ).grid(row=15, column=3,  pady=25)

        tk.Label(master, text="Email/Username:- ", bg='#3498db', font=font_style).grid(row=18, column=2, sticky=tk.E)
        tk.Entry(master, textvariable=self.email_var,  font=search_bar_font, width=20 ).grid(row=18, column=3, pady=15)
        
        tk.Label(master, text="Password:- ", bg='#3498db', font=font_style).grid(row=20, column=2, sticky=tk.E)
        tk.Entry(master, textvariable=self.password_var , show="*",  font=search_bar_font, width=20 ).grid(row=20, column=3, pady=15)
        
        tk.Button(master, text="Save Password", command=self.save_password, bg='#3498db', font=font_style).grid(row=22, column=3, columnspan=2, pady=16)
        tk.Button(master, text="Show Saved Passwords", command=self.show_passwords, bg='#3498db',  font=font_style).grid(row=24, column=3, columnspan=2, pady=16)

        tk.Button(master, text="Generate Password", command=self.generate_password , bg='#3498db', font=font_style).grid(row=26, column=3, columnspan=2, pady=16)

        tk.Button(master, text="check password strength", command=self.check_password_strength , bg='#3498db', font=font_style).grid(row=28, column=3, columnspan=2, pady=16)
     

         # Key for encryption (you should securely store this in a real-world scenario)
        self.key = Fernet.generate_key()
        self.cipher_suite = Fernet(self.key)

        
    def save_password(self):
        website =self.website_var.get()
        email = self.email_var.get()
        password = self.password_var.get()

        if email and password:
            self.saved_passwords.append({"website": website, "email": email, "password": password})
            messagebox.showinfo("Success", "Password saved successfully!")
        else:
            messagebox.showwarning("Error", "Please enter both email and password.")

    def show_passwords(self):
        if self.saved_passwords:
            passwords_text = "\n".join([f"website: {entry['website']}, Email: {entry['email']}, Password: {entry['password']}" for entry in self.saved_passwords])
            messagebox.showinfo("Saved Passwords", passwords_text)
        else:
            messagebox.showinfo("Saved Passwords", "No passwords saved yet.")

    def generate_password(self):
        length = 12
        characters = string.ascii_letters + string.digits + string.punctuation
        generated_password = ''.join(random.choice(characters) for i in range(length))
        
        self.password_var.set(generated_password)
        messagebox.showinfo("Generated Password", f"Your generated password is:\n{generated_password}")

    def check_password_strength(self):
        password = self.password_var.get()
        if len(password) < 8:
            strength = "Weak"
        elif len(password) < 12:
            strength = "Moderate"
        else:
            strength = "Strong"
        messagebox.showinfo("Password Strength", f"Password Strength: {strength}")
    
    def encrypt_password(self, password):
     return self.cipher_suite.encrypt(password.encode())

    def decrypt_password(self, encrypted_password):
        return self.cipher_suite.decrypt(encrypted_password.encode()).decode()

if __name__ == "__main__":
    root = tk.Tk()
    Password_Manager= PasswordManager(root)
    root.mainloop()
